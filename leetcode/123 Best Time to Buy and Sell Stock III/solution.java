class Solution {
    public int maxProfit(int[] prices) { // 要点一：理解该题时始终记住，无论题目中是否允许「在同一天买入并且卖出」这一操作，最终的答案都不会受到影响，因为这一操作带来的收益为零！！！
        int n = prices.length;
        int[][] d = new int[n][4]; // DP的状态转换问题，关键弄清楚几个状态及状态含义；与LeetCode309题类似！！！

        d[0][0] = -prices[0]; // basecase！！！
        d[0][1] = 0;
        d[0][2] = -prices[0];
        d[0][3] = 0;

        for (int i=1; i<n; i++) { // 由于dp状态方程只与前一天状态有关，Go语言答案为空间优化版本！！
            d[i][0] = Math.max(d[i-1][0], -prices[i]); // 状态0：第i天结束，手上持有第一次买操作的股票，记录此时最大收益！！！
            d[i][1] = Math.max(d[i-1][0]+prices[i], d[i-1][1]); // 状态1：第i天结束，手上由于第一次买操作和第一次卖操作而不持有，记录此时最大收益！！！
            d[i][2] = Math.max(d[i-1][1]-prices[i], d[i-1][2]); // 状态2：第i天结束，完成一笔交易的前提下，手上持有第二次买操作的股票，记录此时最大收益！！！
            d[i][3] = Math.max(d[i-1][2]+prices[i], d[i-1][3]); // 状态3：第i天结束，手上由于第二次买操作和第二次卖操作而不持有，记录此时最大收益！！！
        }

        return d[n-1][3]; // 要点二：由于不需要考虑在同一天买入并且卖出的限制，即使状态1收益最大，dp方程也会将第一次交易的结果转移到状态3中！！！
    }
}